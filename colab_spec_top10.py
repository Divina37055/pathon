# -*- coding: utf-8 -*-
"""colab_spec_top10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a8MxAOKFsoSBMaI1D5HDk5XCOzxezK4b

# 📈 Colab: 투기위험 Top10 산출 & ±6개월 추이

두 CSV(거래량지표, 가격지수)로 기준월 전 6개월 평균 대비 증가율을 계산하고, 투기위험 환산치 = (거래량×3 + 가격지수×7)/10 을 산출한 뒤, Top10 및 ±6개월 추이를 출력합니다.
"""

!pip -q install pandas numpy python-dateutil xlsxwriter

import pandas as pd
import numpy as np
from datetime import datetime
from dateutil.relativedelta import relativedelta

def ym_to_col(ym: str) -> str:
    d = datetime.strptime(ym, "%Y-%m")
    return f"{d.year}년 {d.month}월"

def prev_month_columns(ym: str, n: int) -> list:
    d = datetime.strptime(ym, "%Y-%m")
    cols = []
    for i in range(n-1, -1, -1):
        di = d - relativedelta(months=i)
        cols.append(f"{di.year}년 {di.month}월")
    return cols

def around_month_columns(ym: str, n: int) -> list:
    d = datetime.strptime(ym, "%Y-%m")
    cols = []
    for i in range(-n, n+1):
        di = d + relativedelta(months=i)
        cols.append(f"{di.year}년 {di.month}월")
    return cols

def normalize_sido(name: str) -> str:
    if not isinstance(name, str):
        return name
    name = name.strip()
    keys = ["서울","부산","대구","인천","광주","대전","울산","세종",
            "경기","강원","충북","충남","전북","전남","경북","경남","제주"]
    for k in keys:
        if name.startswith(k):
            return k
    for k in keys:
        if k in name:
            return k
    return name

def read_korean_csv(file_or_path):
    try:
        return pd.read_csv(file_or_path)
    except Exception:
        return pd.read_csv(file_or_path, encoding="euc-kr")

def load_trade(trade_path_or_buf):
    df = read_korean_csv(trade_path_or_buf)
    if "No" in df.columns:
        df = df[~df["No"].astype(str).str.fullmatch("No", na=False)].copy()
    if "지역.1" in df.columns:
        df["통합지역"] = df["지역"].astype(str).str.strip() + " " + df["지역.1"].astype(str).str.strip()
    else:
        df["통합지역"] = df["지역"].astype(str).str.strip()
    month_cols = [c for c in df.columns if ("년" in c and ".1" not in c)]
    for c in month_cols:
        df[c] = pd.to_numeric(df[c].astype(str).str.replace('"','').str.replace(',', ''), errors="coerce")
    return df, month_cols

def load_price(price_path_or_buf):
    df = read_korean_csv(price_path_or_buf)
    if "지역" not in df.columns:
        for cand in df.columns:
            if "지역" in cand:
                df = df.rename(columns={cand:"지역"})
                break
    month_cols = [c for c in df.columns if ("년" in c)]
    for c in month_cols:
        df[c] = pd.to_numeric(df[c], errors="coerce")
    return df, month_cols

def compute_growths_for_month(trade_df, price_df, target_ym: str, window=6, weight_vol=3, weight_price=7):
    win_cols = prev_month_columns(target_ym, window)
    win_cols = [c for c in win_cols if (c in trade_df.columns and c in price_df.columns)]
    if len(win_cols) < 1:
        raise ValueError("공통 월 컬럼이 부족합니다.")
    rows = []
    for _, r in trade_df.iterrows():
        sido = str(r["지역"]).strip() if "지역" in r else ""
        region_full = r["통합지역"]
        # 거래량
        tvals = [r.get(c, None) for c in win_cols]
        tcurr = tvals[-1] if tvals else None
        tma = pd.Series(tvals).mean(skipna=True) if tvals else None
        trat = float(tcurr)/tma if (tcurr and tma and tma!=0 and pd.notna(tcurr) and pd.notna(tma)) else np.nan
        # 가격지수
        pmatch = price_df[price_df["지역"].astype(str).str.contains(str(region_full), na=False)]
        if pmatch.empty:
            pmatch = price_df[price_df["지역"].apply(normalize_sido)==normalize_sido(sido)]
        if pmatch.empty:
            pvals = [np.nan]*len(win_cols)
        else:
            p = pmatch.iloc[0]
            pvals = [p.get(c, np.nan) for c in win_cols]
        pcurr = pvals[-1] if pvals else None
        pma = pd.Series(pvals).mean(skipna=True) if pvals else None
        prat = float(pcurr)/pma if (pcurr and pma and pma!=0 and pd.notna(pcurr) and pd.notna(pma)) else np.nan
        spec = (weight_vol*(trat if pd.notna(trat) else 0.0) + weight_price*(prat if pd.notna(prat) else 0.0)) / (weight_vol+weight_price)
        rows.append({
            "지역": sido, "통합지역": region_full, "기준월": target_ym,
            "거래량(기준월)": tcurr, "거래량(6M평균)": tma, "거래량_증가율(기준/6M)": trat,
            "가격지수(기준월)": pcurr, "가격지수(6M평균)": pma, "가격지수_증가율(기준/6M)": prat,
            "투기위험환산치": spec
        })
    return pd.DataFrame(rows)

def extract_window_tables(trade_df, price_df, region_list, center_ym: str, half_window=6):
    cols = around_month_columns(center_ym, half_window)
    cols = [c for c in cols if (c in trade_df.columns or c in price_df.columns)]
    out = {}
    for reg in region_list:
        tr = trade_df[trade_df["통합지역"]==reg]
        if tr.empty:
            continue
        tr = tr.iloc[0]
        trade_row = {c: tr[c] if c in trade_df.columns else np.nan for c in cols}
        pr = price_df[price_df["지역"].astype(str).str.contains(str(reg), na=False)]
        if pr.empty:
            sido = str(tr["지역"]) if "지역" in tr else ""
            pr = price_df[price_df["지역"].apply(normalize_sido)==normalize_sido(sido)]
        if not pr.empty:
            pr = pr.iloc[0]
            price_row = {c: pr[c] if c in price_df.columns else np.nan for c in cols}
        else:
            price_row = {c: np.nan for c in cols}
        df = pd.DataFrame([ [trade_row.get(c, np.nan) for c in cols],
                            [price_row.get(c, np.nan) for c in cols] ],
                          index=["거래량","가격지수"], columns=cols).reset_index().rename(columns={"index":"항목"})
        out[reg] = df
    return out

"""## 1) 파일 업로드"""

from google.colab import files
print('거래량지표 파일 업로드: (월) 행정구역별 아파트거래량지표.csv')
uploaded1 = files.upload()
print('가격지수 파일 업로드: (월) 행정구역별 아파트가격지수.csv')
uploaded2 = files.upload()
trade_path = list(uploaded1.keys())[0]
price_path = list(uploaded2.keys())[0]
trade_df, trade_months = load_trade(trade_path)
price_df, price_months = load_price(price_path)
print('업로드 완료!')
print('예시 공통월:', sorted(list(set(trade_months).intersection(price_months)))[:5])

"""## 2) 기준월/파라미터 설정"""

target_ym = input('기준 연월(YYYY-MM), 미입력 시 공통 최근월 자동 선택: ').strip()
if not target_ym:
    def _parse(col):
        y = int(col.split('년')[0]); m = int(col.split('년')[1].replace('월','').strip()); return (y,m)
    common = sorted(list(set(trade_months).intersection(price_months)), key=_parse)
    latest = common[-1]
    target_ym = f"{latest.split('년')[0].strip()}-{latest.split('년')[1].replace('월','').strip().zfill(2)}"
print('기준월:', target_ym)
window = 6
w_vol, w_price = 3, 7

"""## 3) 계산 실행 및 저장"""

metrics = compute_growths_for_month(trade_df, price_df, target_ym, window, w_vol, w_price)
metrics = metrics.sort_values('투기위험환산치', ascending=False)
top10 = metrics.head(10).copy()
display(top10)
metrics_path = f'증가율_및_투기위험_{target_ym}.csv'
metrics.to_csv(metrics_path, index=False, encoding='utf-8-sig')
print('저장:', metrics_path)

"""## 4) 상위 10개 지역 ±6개월 추이 Excel 생성"""

win_tables = extract_window_tables(trade_df, price_df, top10['통합지역'].tolist(), target_ym, 6)
writer_path = f'상위10_±6개월_추이_{target_ym}.xlsx'
with pd.ExcelWriter(writer_path, engine='xlsxwriter') as writer:
    for reg, df in win_tables.items():
        sheet = reg.replace('/', '_')[:30]
        df.to_excel(writer, sheet_name=sheet, index=False)
print('저장:', writer_path)