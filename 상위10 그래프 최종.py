# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12ZQFLZ22mJQ5relXDhQCKGJ8y8ZAceYE
"""

# -*- coding: utf-8 -*-
"""아파매거래량 증가율이 높은 지역 찾기
Automatically generated by Colab.
Original file is located at
    https://colab.research.google.com/drive/1ehIJGYAqPr4zJcvtmt2gyaAcZ9Ue_4uN
"""
import streamlit as st
import pandas as pd
from pathlib import Path
from datetime import datetime

# ==============================================================================
# 1. 유틸리티 함수 정의: 월 계산 및 컬럼명 형식 지정
# ==============================================================================
@st.cache_data
def get_month_string(year, month):
    """'YYYY년 M월' 형태의 문자열을 반환 (파일 컬럼명과 일치하도록 '0' 제거)."""
    return f"{year}년 {month}월"

@st.cache_data
def get_previous_month(year, month):
    """입력된 년/월의 이전 달의 년/월을 계산하여 반환."""
    if month == 1:
        return year - 1, 12
    else:
        return year, month - 1

@st.cache_data
def get_analysis_months(target_year, target_month):
    """
    분석에 필요한 4개 월(타겟 월과 그 이전 3개월)의 년/월 튜플 리스트를 반환합니다.
    """
    month_list = []
    y, m = target_year, target_month
    # 총 4개의 월을 역순으로 저장합니다. (타겟 월부터 시작)
    for _ in range(4):
        month_list.append((y, m))
        y, m = get_previous_month(y, m)
    return month_list[::-1]  # 가장 오래된 달부터 순서대로 정렬하여 반환

# ==============================================================================
# 2. 파일 로드 함수 (Streamlit 전용)
# ==============================================================================
@st.cache_data
def load_data_from_github():
    """GitHub에서 CSV 파일을 자동으로 로드합니다."""
    github_url = "https://raw.githubusercontent.com/divina37055/pathon/main/(월) 행정구역별 아파트거래량지표.csv"

    try:
        # GitHub raw URL에서 직접 읽기
        for encoding_type in ['cp949', 'utf-8']:
            try:
                df = pd.read_csv(github_url, encoding=encoding_type, header=0)
                return df, None
            except Exception:
                continue
        return None, "파일을 로드할 수 없습니다. 인코딩 문제가 있을 수 있습니다."
    except Exception as e:
        return None, f"GitHub에서 파일을 불러오는 중 오류가 발생했습니다: {str(e)}"

@st.cache_data
def load_data(uploaded_file):
    """업로드된 CSV 파일을 읽어 DataFrame을 반환 (cp949, utf-8 순차 시도)."""
    if uploaded_file is None:
        return None
    df = None
    # 파일 로드 시도 (cp949와 utf-8 순차 시도)
    for encoding_type in ['cp949', 'utf-8']:
        try:
            # BytesIO를 사용하여 메모리에서 직접 파일 로드
            df = pd.read_csv(uploaded_file, encoding=encoding_type, header=0)
            # 파일 로드 성공 시, 파일 포인터를 다시 처음으로 돌려 다음 시도에 영향을 주지 않도록 함
            uploaded_file.seek(0)
            return df
        except Exception:
            # 실패 시 다음 인코딩 시도
            uploaded_file.seek(0)
            continue
    return None

# ==============================================================================
# 3. 데이터 분석 및 결과 반환 함수
# ==============================================================================
def run_analysis(df, input_year, input_month):
    """실제 데이터 분석 로직을 수행하고 결과를 반환합니다."""
    # 날짜 범위 검증 (2020년 1월 ~ 2025년 8월)
    if input_year < 2020 or input_year > 2025:
        return "[오류] 분석 가능한 기간은 2020년 1월부터 2025년 8월까지입니다.", None, None
    if input_year == 2020 and input_month < 1:
        return "[오류] 2020년은 1월부터 분석 가능합니다.", None, None
    if input_year == 2025 and input_month > 8:
        return "[오류] 2025년은 8월까지만 분석 가능합니다.", None, None

    analysis_months_tuple = get_analysis_months(input_year, input_month)
    analysis_month_names = [get_month_string(y, m) for y, m in analysis_months_tuple]

    # 컬럼명 정리 (공백 -> 밑줄)
    df.columns = df.columns.str.replace(r'\s+', '_', regex=True).str.strip()
    trade_cols_underscore = [col.replace(' ', '_') for col in analysis_month_names]

    REGION_COL_KEY = '지역통합'
    if REGION_COL_KEY not in df.columns:
        return f"[오류] 파일에 필수 컬럼 ('{REGION_COL_KEY}')이 없습니다.", None, None

    # 필요한 컬럼만 선택
    required_cols = [REGION_COL_KEY] + trade_cols_underscore
    missing_cols = [col for col in required_cols if col not in df.columns]
    if missing_cols:
        return f"[오류] 분석에 필요한 월별 데이터가 부족합니다. 파일에 {missing_cols} 컬럼이 없습니다. (현재 파일 컬럼: {list(df.columns)})", None, None

    df_analysis = df[required_cols].copy()
    df_analysis.columns = ['지역명'] + analysis_month_names
    trade_months = analysis_month_names

    # '전국' 행 및 결측값 제거
    df_analysis = df_analysis[df_analysis['지역명'].notna()]
    df_analysis = df_analysis[~df_analysis['지역명'].astype(str).str.contains('전국')]

    # 거래건수 컬럼을 숫자형으로 변환
    for col in trade_months:
        df_analysis[col] = df_analysis[col].astype(str).str.replace(r'["\s,]', '', regex=True)
    df_analysis[trade_months] = df_analysis[trade_months].apply(pd.to_numeric, errors='coerce')

    # 데이터 유효성 검사
    if df_analysis[trade_months].isnull().all().all():
        return "[오류] 선택된 기간의 거래량 데이터가 모두 비어있거나 숫자 형식으로 변환할 수 없습니다.", None, None

    # 전월 대비 거래량 증가 비율 계산
    df_pct_change = df_analysis[trade_months].pct_change(axis=1)

    # 비율 컬럼명 정의
    pct_change_cols = []
    for i in range(1, len(trade_months)):
        prev_month = trade_months[i-1]
        curr_month = trade_months[i]
        pct_change_col_name = f"{prev_month} 대비 {curr_month} 증가율 (%)"
        pct_change_cols.append(pct_change_col_name)

    df_results = df_analysis[['지역명']].copy()
    df_results[pct_change_cols] = df_pct_change.iloc[:, 1:].values * 100

    # 각 월별 거래건수 추가 (4개월 전부터 입력월까지)
    for month in trade_months:
        df_results[f'{month} 거래건수'] = df_analysis[month]

    # 필터링 조건 1: 최근 3개월 중 거래량이 0인 값이 있는 지역 제외
    recent_3_months = trade_months[-3:]  # 최근 3개월
    mask_no_zero = (df_analysis[recent_3_months] != 0).all(axis=1)

    # 필터링 조건 2: 입력월(가장 최근 월) 거래량이 상위 30%에 해당하는 지역만 선택
    target_month = trade_months[-1]  # 입력월 (가장 최근 월)
    percentile_70 = df_analysis[target_month].quantile(0.70)  # 상위 30% 기준값
    mask_top_30_pct = df_analysis[target_month] >= percentile_70

    # 두 조건을 모두 만족하는 지역만 필터링
    valid_indices = mask_no_zero & mask_top_30_pct
    df_results_filtered = df_results[valid_indices].copy()

    # 필터링된 결과에서 가장 최근 월의 증가율 기준 TOP 10 선정
    recent_pct_col = pct_change_cols[-1]

    # 필터링 후 데이터가 충분한지 확인
    if len(df_results_filtered) < 1:
        return "[오류] 필터링 조건을 만족하는 지역이 없습니다. (최근 3개월 거래량이 모두 0보다 크고, 입력월 거래량이 상위 30%에 해당하는 지역)", None, None

    # TOP 10 선정 (필터링된 데이터 중에서, 데이터가 10개 미만이면 가능한 만큼만 선정)
    top_n = min(10, len(df_results_filtered))
    top_10_results = df_results_filtered.fillna(0).nlargest(top_n, recent_pct_col)

    # 최종 출력 포맷팅 및 컬럼 순서 재정렬
    # 순서: 지역명, [3개월전 증가율, 3개월전 거래건수], [2개월전 증가율, 2개월전 거래건수],
    #       [전월 증가율, 전월 거래건수], [당월 거래건수]

    final_cols = ['지역명']
    renamed_cols = {'지역명': '지역명'}

    # 컬럼명 매핑 정의
    period_names = ['3개월전', '2개월전', '전월']

    # 3개월 전부터 순서대로 (증가율, 거래건수) 쌍으로 추가
    for i in range(1, len(trade_months)):
        month = trade_months[i]
        pct_col = pct_change_cols[i-1]
        count_col = f'{month} 거래건수'

        # 증가율 포맷팅
        top_10_results[pct_col] = top_10_results[pct_col].map(
            lambda x: '{:,.2f}%'.format(x) if pd.notna(x) and x != 0 else '-'
        )

        # 거래건수 포맷팅
        top_10_results[count_col] = top_10_results[count_col].map(
            lambda x: '{:,.0f}건'.format(x) if pd.notna(x) and x != 0 else '-'
        )

        # 컬럼명 변경 매핑 추가
        if i <= 3:  # 3개월 전부터 전월까지
            period_name = period_names[i-1]
            renamed_cols[pct_col] = f'{period_name} 증가율'
            if i < 3:  # 3개월전, 2개월전
                renamed_cols[count_col] = f'{period_name} 거래건수'
            else:  # 전월
                renamed_cols[count_col] = '전월 거래건수'

        final_cols.extend([pct_col, count_col])

    # 당월 거래건수 (마지막 월의 거래건수)
    last_month_count = f'{trade_months[-1]} 거래건수'
    renamed_cols[last_month_count] = '당월 거래건수'

    top_10_results = top_10_results[final_cols]

    # 컬럼명 변경
    top_10_results = top_10_results.rename(columns=renamed_cols)

    # 그래프용 원본 데이터 반환 (포맷팅 전 데이터)
    graph_data = df_analysis[valid_indices].nlargest(top_n, target_month, keep='first')
    graph_data = graph_data[['지역명'] + trade_months].copy()

    return None, top_10_results, graph_data

# ==============================================================================
# 4. Streamlit 메인 앱 실행
# ==============================================================================
def main():
    st.set_page_config(layout="wide", page_title="아파트 매매 거래 분석기")
    st.title("🏡 아파트 매매 거래량 변화 분석기")
    st.caption("📅 분석 가능 기간: 2020년 1월 ~ 2025년 8월")
    st.markdown("---")

    # -------------------
    # 4-1. 사이드바 (사용자 입력)
    # -------------------
    st.sidebar.header("1. 데이터 소스 선택")

    data_source = st.sidebar.radio(
        "데이터 불러오기 방식",
        options=["GitHub에서 자동 로드", "파일 직접 업로드"],
        index=0,
        help="기본적으로 GitHub의 최신 데이터를 사용합니다."
    )

    uploaded_file = None
    if data_source == "파일 직접 업로드":
        uploaded_file = st.sidebar.file_uploader(
            "파일 (CSV)을 업로드해주세요.",
            type="csv",
            help="파일 이름은 '(월) 행정구역별 아파트매매거래현황.csv' 구조와 유사해야 합니다."
        )

    st.sidebar.header("2. 분석 기준 월 설정")

    # 년도 입력 (2020년 1월 ~ 2025년 8월)
    input_year = st.sidebar.number_input(
        "기준 년도 (YYYY)",
        min_value=2020,
        max_value=2025,
        value=2025,
        step=1,
        help="2020년 1월부터 2025년 8월까지 분석 가능합니다."
    )

    # 월 입력 (년도에 따라 제한)
    if input_year == 2020:
        # 2020년은 1월부터만 가능
        available_months = list(range(1, 13))
        default_month = 0  # 1월
    elif input_year == 2025:
        # 2025년은 8월까지만 가능
        available_months = list(range(1, 9))
        default_month = min(7, len(available_months) - 1)  # 8월 또는 마지막 월
    else:
        # 2021~2024년은 전체 월 가능
        available_months = list(range(1, 13))
        default_month = 0

    input_month = st.sidebar.selectbox(
        "기준 월 (MM)",
        options=available_months,
        index=default_month,
        help="선택한 년도에 따라 분석 가능한 월이 제한됩니다."
    )

    # -------------------
    # 4-2. 데이터 로드 및 분석 실행
    # -------------------
    df = None

    if data_source == "GitHub에서 자동 로드":
        with st.spinner("GitHub에서 데이터를 불러오는 중..."):
            df, error = load_data_from_github()
            if error:
                st.error(error)
                st.info("💡 파일을 직접 업로드하려면 사이드바에서 '파일 직접 업로드'를 선택하세요.")
                return
            else:
                st.success("✅ GitHub에서 데이터를 성공적으로 불러왔습니다!")
    else:
        if uploaded_file is None:
            st.info("좌측 사이드바에 분석할 CSV 파일을 업로드해주세요.")
            return

        # 데이터 로드
        df = load_data(uploaded_file)
        if df is None:
            st.error("파일 로드에 실패했습니다. 파일이 유효한 CSV 형식인지, 인코딩 문제(cp949, utf-8)가 없는지 확인해주세요.")
            return

    # 분석 실행
    with st.spinner("데이터를 분석 중입니다..."):
        error_message, top_10_results_df, graph_data = run_analysis(df, input_year, input_month)

    # -------------------
    # 4-3. 결과 출력
    # -------------------
    if error_message:
        st.error(error_message)
    elif top_10_results_df is not None:
        # 분석 기간 정보
        analysis_months_tuple = get_analysis_months(input_year, input_month)
        analysis_month_names = [get_month_string(y, m) for y, m in analysis_months_tuple]
        recent_month = analysis_month_names[-1]

        st.header(f"🥇 {recent_month} 기준 전월 대비 증가율 TOP 10 지역 분석 결과")
        st.subheader(f"📅 분석 기간: {analysis_month_names[0]} ~ {recent_month} (4개월 데이터 기준)")

        # 필터링 조건 설명
        st.info(f"""
        **📌 필터링 조건:**
        - ✅ 최근 3개월({analysis_month_names[-3]} ~ {recent_month}) 거래량이 모두 0보다 큼
        - ✅ {recent_month} 거래량이 전체 지역 중 상위 30%에 해당
        - 📊 총 {len(top_10_results_df)}개 지역이 조건을 만족하여 분석되었습니다.
        """)

        st.caption(f"💡 각 월별로 '전월 대비 증가율'과 '해당 월 거래건수'를 함께 표시합니다.")
        st.markdown("---")

        # 결과 데이터프레임 출력 (지역명을 인덱스로 설정)
        st.dataframe(
            top_10_results_df.set_index('지역명'),
            use_container_width=True
        )

        st.markdown("---")

        # 그래프 표시 버튼
        col1, col2 = st.columns(2)

        with col1:
            show_inline_graph = st.button("📊 거래건수 변동 그래프 보기", use_container_width=True, type="primary")

        with col2:
            show_popup_graph = st.button("📈 거래건수 변동 그래프 (확대)", use_container_width=True)

        # 인라인 그래프 표시
        if show_inline_graph:
            st.subheader("📊 지역별 거래건수 변동 추이")

            import plotly.graph_objects as go

            fig = go.Figure()

            # 각 지역별로 라인 추가
            for idx, row in graph_data.iterrows():
                region_name = row['지역명']
                values = row[analysis_month_names].values

                fig.add_trace(go.Scatter(
                    x=analysis_month_names,
                    y=values,
                    mode='lines+markers',
                    name=region_name,
                    line=dict(width=2),
                    marker=dict(size=8)
                ))

            fig.update_layout(
                title=f"{recent_month} 기준 TOP 10 지역 거래건수 변동",
                xaxis_title="기간",
                yaxis_title="거래건수 (건)",
                hovermode='x unified',
                legend=dict(
                    orientation="v",
                    yanchor="top",
                    y=1,
                    xanchor="left",
                    x=1.02
                ),
                height=500
            )

            st.plotly_chart(fig, use_container_width=True)

        # 팝업(확대) 그래프 표시
        if show_popup_graph:
            import plotly.graph_objects as go

            fig = go.Figure()

            # 각 지역별로 라인 추가
            for idx, row in graph_data.iterrows():
                region_name = row['지역명']
                values = row[analysis_month_names].values

                fig.add_trace(go.Scatter(
                    x=analysis_month_names,
                    y=values,
                    mode='lines+markers',
                    name=region_name,
                    line=dict(width=3),
                    marker=dict(size=10)
                ))

            fig.update_layout(
                title=dict(
                    text=f"{recent_month} 기준 TOP 10 지역 거래건수 변동",
                    font=dict(size=24)
                ),
                xaxis_title="기간",
                yaxis_title="거래건수 (건)",
                hovermode='x unified',
                legend=dict(
                    orientation="v",
                    yanchor="top",
                    y=1,
                    xanchor="left",
                    x=1.02,
                    font=dict(size=14)
                ),
                height=700,
                width=1200
            )

            # 다이얼로그 스타일로 표시
            with st.container():
                st.markdown("### 📈 거래건수 변동 그래프 (확대 보기)")
                st.plotly_chart(fig, use_container_width=False)

if __name__ == "__main__":
    main()